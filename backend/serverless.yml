service:
  name: recipe-app
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
provider:
  tracing:
    lambda: true
    apiGateway: true
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-3'}
  environment:
    RECIPES_TABLE: Recipes-${self:provider.stage}
    INDEX_NAME: createdAt
    RECIPE_HASH_KEY: userId
    RECIPE_RANGE_KEY: recipeId
    DYNAMODB_OFFLINE_PORT: 8000
    SIGNED_URL_EXPIRATION: 30000
    AUTH0_DOMAIN: 'dev-sjf2wms9.eu.auth0.com'
    PHOTO_URL_S3_BUCKET: 
      Fn::Join:
        - ""
        - - Ref: AWS::AccountId
          - "-recipe-photo-bucket-"
          - ${self:provider.stage}
custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Recipe API
        description: Serverless Backend API for the Recipe App Udacity Nanodegree Capstone Project   
    models:
      - name: RecipeCreateRequest
        contentType: application/json
        schema: ${file(schemas/create-recipe-request.json)}
      - name: RecipeUpdateRequest
        contentType: application/json
        schema: ${file(schemas/update-recipe-request.json)}   
functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
  GetRecipes:
    handler: src/lambda/http/ReadRecipes.handler
    events:
      - http:
          method: get
          path: recipes
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: 
          Fn::Join:
            - ""
            - - "arn:aws:dynamodb:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":table/"
              - ${self:provider.environment.RECIPES_TABLE}
              - "/*"
  CreateRecipes:
    handler: src/lambda/http/CreateRecipe.handler
    events:
      - http:
          method: post
          path: recipes
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new recipe task
            description: Endpoint used to create a new recipe item in the database
            requestModels:
              'application/json': RecipeCreateRequest          
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: 
          Fn::Join:
            - ""
            - - "arn:aws:dynamodb:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":table/"
              - ${self:provider.environment.RECIPES_TABLE}
  UpdateRecipes:
    handler: src/lambda/http/UpdateRecipe.handler
    events:
      - http:
          method: patch
          path: recipes/{recipeId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new recipe task
            description: Endpoint used to create a new recipe item in the database
            requestModels:
              'application/json': RecipeUpdateRequest         
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource: 
          Fn::Join:
            - ""
            - - "arn:aws:dynamodb:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":table/"
              - ${self:provider.environment.RECIPES_TABLE}
  DeleteRecipes:
    handler: src/lambda/http/DeleteRecipe.handler
    events:
      - http:
          method: delete
          path: recipes/{recipeId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource: 
          Fn::Join:
            - ""
            - - "arn:aws:dynamodb:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":table/"
              - ${self:provider.environment.RECIPES_TABLE}   
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: recipes/{recipeId}/photourl
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:PutObject
        Resource: 
          Fn::Join:
            - ""
            - - "arn:aws:s3:::"
              - ${self:provider.environment.PHOTO_URL_S3_BUCKET}
              - "/*"
  GenerateDownloadUrl:
    handler: src/lambda/http/generateDownloadUrl.handler
    events:
      - http:
          method: get
          path: recipes/{recipeId}/photourl
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
        Resource: 
          Fn::Join:
            - ""
            - - "arn:aws:dynamodb:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":table/"
              - ${self:provider.environment.RECIPES_TABLE}
              - "/*"
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource:
          Fn::Join:
            - ""
            - - "arn:aws:s3:::"
              - ${self:provider.environment.PHOTO_URL_S3_BUCKET}
              - "/*"
       
resources:
  Resources:
    RecipesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: ${self:provider.environment.RECIPE_HASH_KEY}
            AttributeType: S
          - AttributeName: ${self:provider.environment.RECIPE_RANGE_KEY}
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: ${self:provider.environment.RECIPE_HASH_KEY}
            KeyType: HASH
          - AttributeName: ${self:provider.environment.RECIPE_RANGE_KEY}
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.RECIPES_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET, OPTIONS, POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    PhotoBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.PHOTO_URL_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - 'GET'
                - 'POST'
                - 'PUT'
                - 'DELETE'
                - 'HEAD'
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref PhotoBucket
        PolicyDocument:
          Id: PhotosPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - ${self:provider.environment.PHOTO_URL_S3_BUCKET}
                    - "/*"